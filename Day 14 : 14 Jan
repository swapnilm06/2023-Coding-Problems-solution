Link : https://leetcode.com/problems/majority-element/solutions/3048585/java-faster-solution/


Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

-------------------------------------------------------------------------------------------

Intuition
using two for loops but time complexity is O(n^2).
second approach :
using hashmap =O(n)

Approach
Using HashMap

Complexity
Time complexity:
O(N)

Space complexity:
O(N)()

Code
class Solution {
    public int majorityElement(int[] nums) {
        HashMap <Integer, Integer> map=new HashMap<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                map.put(nums[i], 1);
            }
        }
        for(int key :map.keySet()){
            if(map.get(key)>n/2){
              return key;  
            //   int me=  key;
              

            }
        }
        return nums[0];
        }
}
