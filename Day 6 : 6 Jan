You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. 
Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

Solution : -----------------------------------------------------------------------------------------------------------------------

class Solution {
   
    ArrayList<Integer> a=new ArrayList<>();
    int i=0;
    public void recoverTree(TreeNode root) {
        inorder(root);
        Collections.sort(a);
        correct(root);
    }
    public void inorder(TreeNode root){
        if(root==null)
        {
            return;
        }
        inorder(root.left);
        a.add(root.val);
        inorder(root.right);
    }
    public void correct(TreeNode root)
    {
        if(root==null) return;
        if(root!=null)
        {
            correct(root.left);
            if(root.val!=a.get(i))
            {
                root.val=a.get(i);
            }
            i++;
            correct(root.right);
        }
    }
            
        }
